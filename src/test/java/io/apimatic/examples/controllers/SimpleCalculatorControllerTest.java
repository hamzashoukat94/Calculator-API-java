/*
 * FirstAPICalculatorLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.apimatic.examples.controllers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import io.apimatic.examples.ApiHelper;
import io.apimatic.examples.FirstAPICalculatorClient;
import io.apimatic.examples.exceptions.ApiException;
import io.apimatic.examples.models.OperationTypeEnum;
import io.apimatic.examples.testing.TestHelper;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

public class SimpleCalculatorControllerTest extends BaseControllerTest {

    /**
     * Client instance.
     */
    private static FirstAPICalculatorClient client;
    
    /**
     * Controller instance (for all tests).
     */
    private static SimpleCalculatorController controller;

    /**
     * Setup test class.
     */
    @BeforeClass
    public static void setUpClass() {
        client = createConfiguration();
        controller = client.getSimpleCalculatorController();
    }

    /**
     * Tear down test class.
     */
    @AfterClass
    public static void tearDownClass() {
        controller = null;
    }

    /**
     * Test the addition of values.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestSum() throws Exception {
        // Parameters for the API call
        OperationTypeEnum operation = OperationTypeEnum.fromString(
                "SUM");
        double x = 10d;
        double y = 3d;

        // Set callback and perform API call
        double result = 0;
        try {
            result = controller.calculate(operation, x, y);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response does not match expected value", 
            13, result, ASSERT_PRECISION);
    }

    /**
     * Multiplication of two operands.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestMultiply() throws Exception {
        // Parameters for the API call
        OperationTypeEnum operation = OperationTypeEnum.fromString(
                "MULTIPLY");
        double x = 5d;
        double y = 6d;

        // Set callback and perform API call
        double result = 0;
        try {
            result = controller.calculate(operation, x, y);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertTrue("Status is not between 200 and 208", 
                httpResponse.getResponse().getStatusCode() >= 200 
                && httpResponse.getResponse().getStatusCode() <= 208);

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response does not match expected value", 
            30, result, ASSERT_PRECISION);
    }

    /**
     * Subtraction of two operands.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestSubtract() throws Exception {
        // Parameters for the API call
        OperationTypeEnum operation = OperationTypeEnum.fromString(
                "SUBTRACT");
        double x = 9d;
        double y = 5d;

        // Set callback and perform API call
        double result = 0;
        try {
            result = controller.calculate(operation, x, y);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response does not match expected value", 
            4, result, ASSERT_PRECISION);
    }

    /**
     * Division of two operands.
     * @throws Throwable exception if occurs.
     */
    @Test
    public void testTestDivision() throws Exception {
        // Parameters for the API call
        OperationTypeEnum operation = OperationTypeEnum.fromString(
                "DIVIDE");
        double x = 25d;
        double y = 5d;

        // Set callback and perform API call
        double result = 0;
        try {
            result = controller.calculate(operation, x, y);
        } catch (ApiException e) {
            // Empty block
        }

        // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response does not match expected value", 
            5, result, ASSERT_PRECISION);
    }

}
